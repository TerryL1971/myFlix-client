var helpers = require("../../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);

try {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _react = require("react");
var _reactDefault = parcelHelpers.interopDefault(_react);
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _reactRedux = require("react-redux");
var _reactRouterDom = require("react-router-dom");
var _actions = require("../../actions/actions");
var _moviesList = require("../movies-list/movies-list");
var _moviesListDefault = parcelHelpers.interopDefault(_moviesList);
var _loginView = require("../login-view/login-view");
var _registrationView = require("../registration-view/registration-view");
var _movieView = require("../movie-view/movie-view");
var _directorView = require("../director-view/director-view");
var _genreView = require("../genre-view/genre-view");
var _navigationBar = require("../navigation-bar/navigation-bar");
var _nav = require("react-bootstrap/Nav");
var _navDefault = parcelHelpers.interopDefault(_nav);
var _navbar = require("react-bootstrap/Navbar");
var _navbarDefault = parcelHelpers.interopDefault(_navbar);
var _navDropdown = require("react-bootstrap/NavDropdown");
var _navDropdownDefault = parcelHelpers.interopDefault(_navDropdown);
var _profileView = require("../profile-view/profile-view");
var _form = require("react-bootstrap/Form");
var _formDefault = parcelHelpers.interopDefault(_form);
var _button = require("react-bootstrap/Button");
var _buttonDefault = parcelHelpers.interopDefault(_button);
var _row = require("react-bootstrap/Row");
var _rowDefault = parcelHelpers.interopDefault(_row);
var _col = require("react-bootstrap/Col");
var _colDefault = parcelHelpers.interopDefault(_col);
class MainView extends _reactDefault.default.Component {
    constructor(){
        super();
        this.state = {
            user: null,
            token: null,
            user_profile: null
        };
    }
    componentDidMount() {
        let accessToken = localStorage.getItem('token');
        console.log("Text token", accessToken);
        if (accessToken !== null) {
            this.setState({
                user: localStorage.getItem('user'),
                user_profile: JSON.parse(localStorage.getItem('profile')),
                token: localStorage.getItem('token')
            });
            this.getMovies(accessToken);
        }
    }
    getMovies(token) {
        _axiosDefault.default.get('https://myflix-app-2021.herokuapp.com/movies', {
            headers: {
                Authorization: `Bearer ${token}`
            }
        }).then((response)=>{
            // Assign the result to the state
            this.setState({
                movies: response.data
            });
            this.props.setMovies(response.data);
        }).catch(function(error) {
            console.log(error);
        });
    }
    /* When a user successfully logs in, this function updates the `user` property in state to that *particular user*/ onLoggedIn(authData) {
        console.log(authData);
        this.setState({
            user: authData.user.Username,
            token: authData.token,
            user_profile: authData.user
        });
        localStorage.setItem('profile', JSON.stringify(authData.user));
        localStorage.setItem('token', authData.token);
        localStorage.setItem('user', authData.user.Username);
        this.getMovies(authData.token);
    }
    onRegister(register) {
        console.log(register);
        this.setState({
            register
        });
    }
    onLoggedOut() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        localStorage.removeItem('profile');
        this.setState({
            user: null,
            token: null,
            user_profile: null
        });
        window.open('/', '_self');
    }
    // Update Users info
    updateUser(data) {
        this.setState({
            user: data.Username,
            user_profile: data
        });
        localStorage.setItem('user', data.Username);
        localStorage.setItem('profile', JSON.stringify(data));
    }
    // Remove account
    deleteUser() {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        localStorage.removeItem('profile');
        this.setState({
            user: null,
            token: null,
            user_profile: null
        });
    }
    // Set the state of user_profile, which represents an object with data about a user, after adding or deleting a movie.
    onMovieAddOrDelete(data) {
        this.setState({
            user_profile: data
        });
        localStorage.setItem('profile', JSON.stringify(data));
    }
    render() {
        const { user_profile , token , register  } = this.state;
        let { movies  } = this.props;
        let { user  } = this.state;
        console.log("hello", user);
        return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.BrowserRouter, {
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 146
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_rowDefault.default, {
            className: "main-view justify-content-md-center",
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 147
            },
            __self: this
        }, /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            exact: true,
            path: "/",
            render: ()=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                var m;
                // #6
                return(/*#__PURE__*/ _reactDefault.default.createElement(_moviesListDefault.default, {
                    movies: movies
                }));
            },
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 148
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/register",
            render: ()=>{
                if (user) return(/*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Redirect, {
                    to: "/"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_registrationView.RegistrationView, null)));
            },
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 176
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/movies/:movieId",
            render: ({ match , history  })=>{
                if (!user) return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLoggedIn: (user1)=>this.onLoggedIn(user1)
                })));
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_navigationBar.NavigationBar, {
                    logOut: ()=>this.onLoggedOut()
                    ,
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_movieView.MovieView, {
                    movie: movies.find((m)=>m._id === match.params.movieId
                    ),
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 183
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/directors/:name",
            render: ({ match , history  })=>{
                if (!user) return;
                /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLogin: (user1)=>this.onLoggedIn(user1)
                });
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_navigationBar.NavigationBar, {
                    logOut: ()=>this.onLoggedOut()
                    ,
                    user: user,
                    Redirect: true,
                    to: "/"
                }), /*#__PURE__*/ _reactDefault.default.createElement(_directorView.DirectorView, {
                    director: movies.find((m)=>m.Director.Name === match.params.name
                    ).Director,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 194
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/genres/:name",
            render: ({ match , history  })=>{
                if (!user) return;
                /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLogin: (user1)=>this.onLoggedIn(user1)
                });
                if (movies.length === 0) return(/*#__PURE__*/ _reactDefault.default.createElement("div", {
                    className: "main-view"
                }));
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, {
                    md: 8
                }, /*#__PURE__*/ _reactDefault.default.createElement(_navigationBar.NavigationBar, {
                    logOut: ()=>this.onLoggedOut()
                    ,
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_genreView.GenreView, {
                    genre: movies.find((m)=>m.Genre.Name === match.params.name
                    ).Genre,
                    onBackClick: ()=>history.goBack()
                })));
            },
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 204
            },
            __self: this
        }), /*#__PURE__*/ _reactDefault.default.createElement(_reactRouterDom.Route, {
            path: "/users/:username",
            render: ()=>{
                if (!user) return;
                /*#__PURE__*/ _reactDefault.default.createElement(_loginView.LoginView, {
                    onLogin: (user1)=>this.onLoggedIn(user1)
                });
                return(/*#__PURE__*/ _reactDefault.default.createElement(_colDefault.default, null, /*#__PURE__*/ _reactDefault.default.createElement(_navigationBar.NavigationBar, {
                    logOut: ()=>this.onLoggedOut()
                    ,
                    user: user
                }), /*#__PURE__*/ _reactDefault.default.createElement(_profileView.ProfileView, {
                    clickBack: ()=>{
                        history.goBack();
                    },
                    userProfile: user_profile,
                    userToken: token,
                    onDelete: ()=>this.deleteUser()
                    ,
                    onUpdate: (data)=>this.updateUser(data)
                    ,
                    movies: movies,
                    onMovieDelete: (data)=>this.onMovieAddOrDelete(data)
                })));
            },
            __source: {
                fileName: "/Users/terry_c_lombardi/Desktop/myFlix-client/myFlix-client/src/components/main-view/main-view.jsx",
                lineNumber: 214
            },
            __self: this
        }))));
    }
}
let mapStateToProps = (state)=>{
    return {
        movies: state.movies
    };
};
exports.default = _reactRedux.connect(mapStateToProps, {
    setMovies: _actions.setMovies
})(MainView);

  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}